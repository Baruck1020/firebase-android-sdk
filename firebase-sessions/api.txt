// Signature format: 2.0
package com.google.firebase.sessions {

  public final class FirebaseSessions {
    method @NonNull public static com.google.firebase.sessions.FirebaseSessions getInstance();
    method @NonNull public static com.google.firebase.sessions.FirebaseSessions getInstance(@NonNull com.google.firebase.FirebaseApp app);
    method public void register(@NonNull com.google.firebase.sessions.api.SessionSubscriber subscriber);
    property @NonNull public static final com.google.firebase.sessions.FirebaseSessions instance;
    field @NonNull public static final com.google.firebase.sessions.FirebaseSessions.Companion Companion;
  }

  public static final class FirebaseSessions.Companion {
    method @NonNull public com.google.firebase.sessions.FirebaseSessions getInstance();
    method @NonNull public com.google.firebase.sessions.FirebaseSessions getInstance(@NonNull com.google.firebase.FirebaseApp app);
    property @NonNull public final com.google.firebase.sessions.FirebaseSessions instance;
  }

}

package com.google.firebase.sessions.api {

  public final class FirebaseSessionsDependencies {
    method public void addDependency(@NonNull com.google.firebase.sessions.api.SessionSubscriber.Name subscriberName);
    field @NonNull public static final com.google.firebase.sessions.api.FirebaseSessionsDependencies INSTANCE;
  }

  public interface SessionSubscriber {
    method @NonNull public com.google.firebase.sessions.api.SessionSubscriber.Name getSessionSubscriberName();
    method public boolean isDataCollectionEnabled();
    method public void onSessionChanged(@NonNull com.google.firebase.sessions.api.SessionSubscriber.SessionDetails sessionDetails);
    property public abstract boolean isDataCollectionEnabled;
    property @NonNull public abstract com.google.firebase.sessions.api.SessionSubscriber.Name sessionSubscriberName;
  }

  public enum SessionSubscriber.Name {
    method @NonNull public static com.google.firebase.sessions.api.SessionSubscriber.Name valueOf(@NonNull String name) throws java.lang.IllegalArgumentException;
    method @NonNull public static com.google.firebase.sessions.api.SessionSubscriber.Name[] values();
    enum_constant public static final com.google.firebase.sessions.api.SessionSubscriber.Name CRASHLYTICS;
    enum_constant @Discouraged(message="This is for testing purposes only.") public static final com.google.firebase.sessions.api.SessionSubscriber.Name MATT_SAYS_HI;
    enum_constant public static final com.google.firebase.sessions.api.SessionSubscriber.Name PERFORMANCE;
  }

  public static final class SessionSubscriber.SessionDetails {
    ctor public SessionSubscriber.SessionDetails(@NonNull String sessionId);
    method @NonNull public String component1();
    method @NonNull public com.google.firebase.sessions.api.SessionSubscriber.SessionDetails copy(@NonNull String sessionId);
    method @NonNull public String getSessionId();
    property @NonNull public final String sessionId;
  }

}

package com.google.firebase.sessions.settings {

  public interface SettingsProvider {
    method @Nullable public Double getSamplingRate();
    method @Nullable public Boolean getSessionEnabled();
    method @Nullable public kotlin.time.Duration getSessionRestartTimeout();
    method public boolean isSettingsStale();
    method public void updateSettings();
    property @Nullable public abstract Double samplingRate;
    property @Nullable public abstract Boolean sessionEnabled;
    property @Nullable public abstract kotlin.time.Duration sessionRestartTimeout;
  }

}

